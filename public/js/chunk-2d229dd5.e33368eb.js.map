{"version":3,"sources":["webpack:///./src/views/page/mq.vue?8f78","webpack:///src/views/page/mq.vue","webpack:///./src/views/page/mq.vue?80c0","webpack:///./src/views/page/mq.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","on","print","_m","staticRenderFns","staticStyle","component"],"mappings":"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","file":"public/js/chunk-2d229dd5.e33368eb.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"suyan__home\"},[_c('h1',[_vm._v(\"消息中间件\"),_c('el-button',{staticClass:\"suyan__btn__print\",attrs:{\"type\":\"primary\",\"plain\":\"\"},on:{\"click\":_vm.print}},[_vm._v(\"打印pdf\")])],1),_c('el-divider'),_c('h3',[_vm._v(\"一、为什么要使用MQ？\")]),_vm._m(0),_c('h3',[_vm._v(\"二、RocketMQ由哪些角色组成，每个角色作用和特点是什么？\")]),_vm._m(1),_c('h3',[_vm._v(\"三、RocketMQ如何做负载均衡？\")]),_c('p'),_c('h3',[_vm._v(\"四、如何处理RocketMQ消息重复消费？\")]),_c('p',[_vm._v(\"影响消息正常发送和消费的重要原因是网络的不稳定性。\")]),_c('p',[_vm._v(\"引起重复消费的原因：\")]),_vm._m(2),_c('p',[_vm._v(\"解决方案：\")]),_vm._m(3),_c('h3',[_vm._v(\"五、如何让RocketMQ保证消息的顺序消费？\")]),_c('p',[_vm._v(\"多个queue只能保证单个queue里的顺序，queue是典型的FIFO(First Input First Output)先进先出队列，天然顺序。多个queue同时消费是无法绝对保证消息的有序性的。同一个topic，同一个queue，发消息的时候一个线程去发送消息，消费的时候一个线程去消费一个queue里的消息。\")]),_c('p',[_vm._v(\"怎么保证消息发送到同一个queue？\")]),_c('p',[_vm._v(\"RocketMQ给我们提供了MessageQueueSelector接口，可以自己重写里面的接口，实现自己的算法。比如：i % 2 == 0，那就都放到queue1里，否则放到queue2里。\")]),_c('h3',[_vm._v(\"六、RocketMQ如何保证消息不丢失？\")]),_c('p',[_vm._v(\"1、Producer端如何保证消息不丢失\")]),_vm._m(4),_c('p',[_vm._v(\"2、Broker端如何保证消息不丢失\")]),_vm._m(5),_c('p',[_vm._v(\"3、Consumer端如何保证消息不丢失\")]),_vm._m(6),_c('h3',[_vm._v(\"七、RocketMQ的消息堆积如何处理？\")]),_c('p'),_c('h3',[_vm._v(\"八、RocketMQ在分布式事务支持这块机制的底层原因\")]),_c('p',[_vm._v(\"RocketMQ4.3+提供分布式事务功能，通过RocketMQ事务消息能达到分布式事务的最终一致。\")]),_c('p',[_vm._v(\"RocketMQ实现方式：\")]),_vm._m(7),_c('p',[_vm._v(\"也就是它并未真正进入Topic的queue，而是用了临时queue来放所谓的half message，等提交事务后才会真正的将half message转移到topic下的queue。\")]),_c('h3',[_vm._v(\"九、RocketMQ是如何保证数据的高容错性的？\")]),_vm._m(8),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p')],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('table',{staticStyle:{\"border-collapse\":\"collapse\",\"width\":\"auto\"},attrs:{\"border\":\"1\"}},[_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"width\":\"80px\"}},[_vm._v(\"作用\")]),_c('td',{staticStyle:{\"width\":\"auto\"}},[_vm._v(\"描述\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"80px\"}},[_vm._v(\"解耦\")]),_c('td',{staticStyle:{\"width\":\"auto\"}},[_vm._v(\"系统耦合度降低，没有强依赖关系\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"80px\"}},[_vm._v(\"异步\")]),_c('td',{staticStyle:{\"width\":\"auto\"}},[_vm._v(\"不需要同步执行的远程调用，可以有效提高响应时间\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"80px\"}},[_vm._v(\"削峰\")]),_c('td',{staticStyle:{\"width\":\"auto\"}},[_vm._v(\"请求达到峰值后，后端service还可以保持固定消费速率消费，不会被压垮\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('table',{staticStyle:{\"border-collapse\":\"collapse\",\"width\":\"100%\"},attrs:{\"border\":\"1\"}},[_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"width\":\"48.8717%\"}},[_vm._v(\"角色\")]),_c('td',{staticStyle:{\"width\":\"48.948%\"}},[_vm._v(\"作用\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"48.8717%\"}},[_vm._v(\"Nameserver\")]),_c('td',{staticStyle:{\"width\":\"48.948%\"}},[_vm._v(\"无状态，动态列表；这也是和zk的重要区别之一，zk有状态\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"48.8717%\"}},[_vm._v(\"Producer\")]),_c('td',{staticStyle:{\"width\":\"48.948%\"}},[_vm._v(\"消息生产着，负责发消息到Broker\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"48.8717%\"}},[_vm._v(\"Broker\")]),_c('td',{staticStyle:{\"width\":\"48.948%\"}},[_vm._v(\"就是MQ本身，负责收发消息、持久化消息等\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"48.8717%\"}},[_vm._v(\"Consumer\")]),_c('td',{staticStyle:{\"width\":\"48.948%\"}},[_vm._v(\"消息消费者，负责从Broker上拉去消息进行消费，消费完进行ack\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"ACK：正常情况下在consumer真正消费完消息后应该发送ack，通知Broker该消息已正常消费，从queue中剔除。当ack因为网络原因无法发送到Broker，Borker会认为此消息没有被消费，此后会开启消息重投机制把消息再次投递到consumer。\")]),_c('li',[_vm._v(\"消费模式：在CLUSTERING模式下，消息在Broker中会保证相同group的consumer消费一次，但是针对不同group的consumer会推送多次。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"数据库表：处理消息钱，使用消息主键在表中带有约束的字段中insert\")]),_c('li',[_vm._v(\"Map：单机时可以使用map\")]),_c('li',[_vm._v(\"Redis：分布式锁\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"采用send()同步发消息，发送接口是同步感知的\")]),_c('li',[_vm._v(\"发送失败后可以重试，设置重试次数，默认3次。producer.setRetryTimesWhenSendFailed(10);\")]),_c('li',[_vm._v(\"集群部署，比如发送失败了的原因可能是当前Broker宕机了，重试的时候会发送到其他Broker上\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"修改刷盘策略为同步刷盘。默认情况下是异步刷盘。flushDiskType=SYNC_FLUSH\")]),_c('li',[_vm._v(\"集群部署，主从模式，高可用\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"完全消费正常后在进行手动ack确认\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"Half Message：预处理消息，当broker收到此类消息后，会存储到RMQ_SYS_TRANS_HALF_TOPIC的消息消费队列中。\")]),_c('li',[_vm._v(\"检查事务状态：broker会开始一个定时任务，消费RMQ_SYS_TRANS_HALF_TOPIC队列中的消息，每次执行任务会向消息发送者确认事务执行状态(提交、回滚、未知)，如果是未知，broker会定时去回调重新检查。\")]),_c('li',[_vm._v(\"超时：如果超过回查次数，默认回滚消息。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"在不开启容错的情况下，轮询队列进行发送，如果失败了，重试的时候过滤失败的Broker。\")]),_c('li',[_vm._v(\"如果开启了容错策略，会通过RocketMQ的预测机制来预测一个Broker是否可用。\")]),_c('li',[_vm._v(\"如果上次失败的Broker可用那么还是选择该Broker队列。\")]),_c('li',[_vm._v(\"如果上述情况失败，则随机选择一个进行发送。\")]),_c('li',[_vm._v(\"在发送消息的时候会记录一下调用的时间与是否报错，根据该时间去预测Broker的可用时间。\")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"suyan__home\">\n        <h1>消息中间件<el-button class=\"suyan__btn__print\" type=\"primary\" plain @click=\"print\">打印pdf</el-button></h1><el-divider></el-divider>\n        <h3>一、为什么要使用MQ？</h3>\n<table style=\"border-collapse: collapse; width: auto;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 80px;\">作用</td>\n<td style=\"width: auto;\">描述</td>\n</tr>\n<tr>\n<td style=\"width: 80px;\">解耦</td>\n<td style=\"width: auto;\">系统耦合度降低，没有强依赖关系</td>\n</tr>\n<tr>\n<td style=\"width: 80px;\">异步</td>\n<td style=\"width: auto;\">不需要同步执行的远程调用，可以有效提高响应时间</td>\n</tr>\n<tr>\n<td style=\"width: 80px;\">削峰</td>\n<td style=\"width: auto;\">请求达到峰值后，后端service还可以保持固定消费速率消费，不会被压垮</td>\n</tr>\n</tbody>\n</table>\n<h3>二、RocketMQ由哪些角色组成，每个角色作用和特点是什么？</h3>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 48.8717%;\">角色</td>\n<td style=\"width: 48.948%;\">作用</td>\n</tr>\n<tr>\n<td style=\"width: 48.8717%;\">Nameserver</td>\n<td style=\"width: 48.948%;\">无状态，动态列表；这也是和zk的重要区别之一，zk有状态</td>\n</tr>\n<tr>\n<td style=\"width: 48.8717%;\">Producer</td>\n<td style=\"width: 48.948%;\">消息生产着，负责发消息到Broker</td>\n</tr>\n<tr>\n<td style=\"width: 48.8717%;\">Broker</td>\n<td style=\"width: 48.948%;\">就是MQ本身，负责收发消息、持久化消息等</td>\n</tr>\n<tr>\n<td style=\"width: 48.8717%;\">Consumer</td>\n<td style=\"width: 48.948%;\">消息消费者，负责从Broker上拉去消息进行消费，消费完进行ack</td>\n</tr>\n</tbody>\n</table>\n<h3>三、RocketMQ如何做负载均衡？</h3>\n<p>&nbsp;</p>\n<h3>四、如何处理RocketMQ消息重复消费？</h3>\n<p>影响消息正常发送和消费的重要原因是网络的不稳定性。</p>\n<p>引起重复消费的原因：</p>\n<ul>\n<li>ACK：正常情况下在consumer真正消费完消息后应该发送ack，通知Broker该消息已正常消费，从queue中剔除。当ack因为网络原因无法发送到Broker，Borker会认为此消息没有被消费，此后会开启消息重投机制把消息再次投递到consumer。</li>\n<li>消费模式：在CLUSTERING模式下，消息在Broker中会保证相同group的consumer消费一次，但是针对不同group的consumer会推送多次。</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>数据库表：处理消息钱，使用消息主键在表中带有约束的字段中insert</li>\n<li>Map：单机时可以使用map</li>\n<li>Redis：分布式锁</li>\n</ul>\n<h3>五、如何让RocketMQ保证消息的顺序消费？</h3>\n<p>多个queue只能保证单个queue里的顺序，queue是典型的FIFO(First Input First Output)先进先出队列，天然顺序。多个queue同时消费是无法绝对保证消息的有序性的。同一个topic，同一个queue，发消息的时候一个线程去发送消息，消费的时候一个线程去消费一个queue里的消息。</p>\n<p>怎么保证消息发送到同一个queue？</p>\n<p>RocketMQ给我们提供了MessageQueueSelector接口，可以自己重写里面的接口，实现自己的算法。比如：i % 2 == 0，那就都放到queue1里，否则放到queue2里。</p>\n<h3>六、RocketMQ如何保证消息不丢失？</h3>\n<p>1、Producer端如何保证消息不丢失</p>\n<ul>\n<li>采用send()同步发消息，发送接口是同步感知的</li>\n<li>发送失败后可以重试，设置重试次数，默认3次。producer.setRetryTimesWhenSendFailed(10);</li>\n<li>集群部署，比如发送失败了的原因可能是当前Broker宕机了，重试的时候会发送到其他Broker上</li>\n</ul>\n<p>2、Broker端如何保证消息不丢失</p>\n<ul>\n<li>修改刷盘策略为同步刷盘。默认情况下是异步刷盘。flushDiskType=SYNC_FLUSH</li>\n<li>集群部署，主从模式，高可用</li>\n</ul>\n<p>3、Consumer端如何保证消息不丢失</p>\n<ul>\n<li>完全消费正常后在进行手动ack确认</li>\n</ul>\n<h3>七、RocketMQ的消息堆积如何处理？</h3>\n<p>&nbsp;</p>\n<h3>八、RocketMQ在分布式事务支持这块机制的底层原因</h3>\n<p>RocketMQ4.3+提供分布式事务功能，通过RocketMQ事务消息能达到分布式事务的最终一致。</p>\n<p>RocketMQ实现方式：</p>\n<ul>\n<li>Half Message：预处理消息，当broker收到此类消息后，会存储到RMQ_SYS_TRANS_HALF_TOPIC的消息消费队列中。</li>\n<li>检查事务状态：broker会开始一个定时任务，消费RMQ_SYS_TRANS_HALF_TOPIC队列中的消息，每次执行任务会向消息发送者确认事务执行状态(提交、回滚、未知)，如果是未知，broker会定时去回调重新检查。</li>\n<li>超时：如果超过回查次数，默认回滚消息。</li>\n</ul>\n<p>也就是它并未真正进入Topic的queue，而是用了临时queue来放所谓的half message，等提交事务后才会真正的将half message转移到topic下的queue。</p>\n<h3>九、RocketMQ是如何保证数据的高容错性的？</h3>\n<ul>\n<li>在不开启容错的情况下，轮询队列进行发送，如果失败了，重试的时候过滤失败的Broker。</li>\n<li>如果开启了容错策略，会通过RocketMQ的预测机制来预测一个Broker是否可用。</li>\n<li>如果上次失败的Broker可用那么还是选择该Broker队列。</li>\n<li>如果上述情况失败，则随机选择一个进行发送。</li>\n<li>在发送消息的时候会记录一下调用的时间与是否报错，根据该时间去预测Broker的可用时间。</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n    </div>\n</template>\n\n<script>\nimport Util from '@/libs/util';\nexport default {\n    methods: {\n        print() {\n            Util.print();\n        }\n    }\n}\n</script>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./mq.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./mq.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mq.vue?vue&type=template&id=7bef1bb8&\"\nimport script from \"./mq.vue?vue&type=script&lang=js&\"\nexport * from \"./mq.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}