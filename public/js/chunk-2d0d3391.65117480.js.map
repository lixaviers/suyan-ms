{"version":3,"sources":["webpack:///./src/views/page/spring.vue?80e0","webpack:///src/views/page/spring.vue","webpack:///./src/views/page/spring.vue?ed28","webpack:///./src/views/page/spring.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","on","print","_m","staticRenderFns","staticStyle","component"],"mappings":"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","file":"public/js/chunk-2d0d3391.65117480.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"suyan__home\"},[_c('h1',[_vm._v(\"Spring\"),_c('el-button',{staticClass:\"suyan__btn__print\",attrs:{\"type\":\"primary\",\"plain\":\"\"},on:{\"click\":_vm.print}},[_vm._v(\"打印pdf\")])],1),_c('el-divider'),_c('h3',[_vm._v(\"一、Spring事务原理\")]),_c('h4',[_vm._v(\"1.1 事务的基本原理\")]),_c('p',[_vm._v(\"Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照以下步骤进行：\")]),_vm._m(0),_c('p',[_vm._v(\"使用Spring的事务管理功能后，我们可以不再写步骤2和4的代码，而是由Spring自动完成。那么Spring是如何在我们书写的CRUD之前和之后开启事务和关闭事务呢？以注解方式为例子：\")]),_vm._m(1),_c('h4',[_vm._v(\"1.2 Spring事务的传播机制\")]),_c('p',[_vm._v(\"所谓Spring事务的传播机制，就是定义在存在多个事务同时存在的时候，Spring应该如何处理这些事务的行为。这些属性在TransactionDefinition中定义，具体如下：\")]),_vm._m(2),_c('h4',[_vm._v(\"1.3 数据库隔离级别\")]),_vm._m(3),_c('p',[_vm._v(\"隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。大多是数据库默认的隔离级别为Read-Committed，比如SqlServer、Oracle。少数数据库默认隔离级别为：Repeatable-Read，比如MySQL InnoDB。\")]),_vm._m(4),_c('p',[_vm._v(\"二、\")])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('pre',{staticClass:\"language-java\"},[_c('code',[_vm._v(\"1.获取连接 Connection con = DriverManager.getConnection()\\n2.开启事务con.setAutoCommit(true/false);\\n3.执行CRUD\\n4.提交事务/回滚事务 con.commit() / con.rollback();\\n5.关闭连接 conn.close();\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('pre',{staticClass:\"language-java\"},[_c('code',[_vm._v(\"1.配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。\\n2.spring 在启动的时候会去解析生成相关的bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入，这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。\\n3.真正的数据库层的事务提交和回滚是通过bin log或者redo log实现的。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"PROPAGATION_REQUIRED(必须的)：支持当前事务，如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择，也是spring默认的传播机制。\")]),_c('li',[_vm._v(\"PROPAGATION_REQUIRES_NEW(隔离)：不支持当前事务。新建事务，如果当前存在事务中，把当前的事务挂起。新建的事务将和被挂起的事务没有任何关联，是两个独立的事务，外层事务失败回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作。\")]),_c('li',[_vm._v(\"PROPAGATION_SUPPORTS(支持)：支持当前事务，如果当前没有事务，就以非事务方式执行。\")]),_c('li',[_vm._v(\"PROPAGATION_MANDATORY(强制)：支持当前的事务，如果当前没有事务，就抛出异常。\")]),_c('li',[_vm._v(\"PROPAGATION_NOT_SUPPORTED(不支持)：不支持当前事务。以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\")]),_c('li',[_vm._v(\"PROPAGATION_NEVER(强制非事务)：不支持当前事务。以非事务方式执行，如果当前存在事务，则抛出异常。\")]),_c('li',[_vm._v(\"PROPAGATION_NESTED(嵌套事务)：如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('table',{staticStyle:{\"border-collapse\":\"collapse\",\"width\":\"620px\"},attrs:{\"border\":\"1\"}},[_c('tbody',[_c('tr',[_c('td',{staticStyle:{\"width\":\"180px\"}},[_vm._v(\"隔离级别\")]),_c('td',{staticStyle:{\"width\":\"140px\"}},[_vm._v(\"隔离级别的值\")]),_c('td',{staticStyle:{\"width\":\"300px\"}},[_vm._v(\"导致的问题\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"180px\"}},[_vm._v(\"Read-Uncommitted\")]),_c('td',{staticStyle:{\"width\":\"140px\"}},[_vm._v(\"0\")]),_c('td',{staticStyle:{\"width\":\"300px\"}},[_vm._v(\"导致脏读\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"180px\"}},[_vm._v(\"Read-Committed\")]),_c('td',{staticStyle:{\"width\":\"140px\"}},[_vm._v(\"1\")]),_c('td',{staticStyle:{\"width\":\"300px\"}},[_vm._v(\"避免脏读，允许不可重复读和幻读\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"180px\"}},[_vm._v(\"Repeatable-Read\")]),_c('td',{staticStyle:{\"width\":\"140px\"}},[_vm._v(\"2\")]),_c('td',{staticStyle:{\"width\":\"300px\"}},[_vm._v(\"避免脏读，不可重复读，允许幻读\")])]),_c('tr',[_c('td',{staticStyle:{\"width\":\"180px\"}},[_vm._v(\"Serializable\")]),_c('td',{staticStyle:{\"width\":\"140px\"}},[_vm._v(\"3\")]),_c('td',{staticStyle:{\"width\":\"300px\"}},[_vm._v(\"串行化读，事务只能一个一个执行，避免脏读、不可重复读、幻读。执行效率慢，使用时慎用\")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('a',{attrs:{\"href\":\"https://lixaviers.github.io/suyan-ms/#/mysql\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"数据库事务移步MySQL第七条\")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"suyan__home\">\n        <h1>Spring<el-button class=\"suyan__btn__print\" type=\"primary\" plain @click=\"print\">打印pdf</el-button></h1><el-divider></el-divider>\n        <h3>一、Spring事务原理</h3>\n<h4>1.1 事务的基本原理</h4>\n<p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，Spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照以下步骤进行：</p>\n<pre class=\"language-java\"><code>1.获取连接 Connection con = DriverManager.getConnection()\n2.开启事务con.setAutoCommit(true/false);\n3.执行CRUD\n4.提交事务/回滚事务 con.commit() / con.rollback();\n5.关闭连接 conn.close();</code></pre>\n<p>使用Spring的事务管理功能后，我们可以不再写步骤2和4的代码，而是由Spring自动完成。那么Spring是如何在我们书写的CRUD之前和之后开启事务和关闭事务呢？以注解方式为例子：</p>\n<pre class=\"language-java\"><code>1.配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。\n2.spring 在启动的时候会去解析生成相关的bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入，这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。\n3.真正的数据库层的事务提交和回滚是通过bin log或者redo log实现的。</code></pre>\n<h4>1.2 Spring事务的传播机制</h4>\n<p>所谓Spring事务的传播机制，就是定义在存在多个事务同时存在的时候，Spring应该如何处理这些事务的行为。这些属性在TransactionDefinition中定义，具体如下：</p>\n<ul>\n<li>PROPAGATION_REQUIRED(必须的)：支持当前事务，如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择，也是spring默认的传播机制。</li>\n<li>PROPAGATION_REQUIRES_NEW(隔离)：不支持当前事务。新建事务，如果当前存在事务中，把当前的事务挂起。新建的事务将和被挂起的事务没有任何关联，是两个独立的事务，外层事务失败回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作。</li>\n<li>PROPAGATION_SUPPORTS(支持)：支持当前事务，如果当前没有事务，就以非事务方式执行。</li>\n<li>PROPAGATION_MANDATORY(强制)：支持当前的事务，如果当前没有事务，就抛出异常。</li>\n<li>PROPAGATION_NOT_SUPPORTED(不支持)：不支持当前事务。以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>\n<li>PROPAGATION_NEVER(强制非事务)：不支持当前事务。以非事务方式执行，如果当前存在事务，则抛出异常。</li>\n<li>PROPAGATION_NESTED(嵌套事务)：如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。</li>\n</ul>\n<h4>1.3 数据库隔离级别</h4>\n<table style=\"border-collapse: collapse; width: 620px;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 180px;\">隔离级别</td>\n<td style=\"width: 140px;\">隔离级别的值</td>\n<td style=\"width: 300px;\">导致的问题</td>\n</tr>\n<tr>\n<td style=\"width: 180px;\">Read-Uncommitted</td>\n<td style=\"width: 140px;\">0</td>\n<td style=\"width: 300px;\">导致脏读</td>\n</tr>\n<tr>\n<td style=\"width: 180px;\">Read-Committed</td>\n<td style=\"width: 140px;\">1</td>\n<td style=\"width: 300px;\">避免脏读，允许不可重复读和幻读</td>\n</tr>\n<tr>\n<td style=\"width: 180px;\">Repeatable-Read</td>\n<td style=\"width: 140px;\">2</td>\n<td style=\"width: 300px;\">避免脏读，不可重复读，允许幻读</td>\n</tr>\n<tr>\n<td style=\"width: 180px;\">Serializable</td>\n<td style=\"width: 140px;\">3</td>\n<td style=\"width: 300px;\">串行化读，事务只能一个一个执行，避免脏读、不可重复读、幻读。执行效率慢，使用时慎用</td>\n</tr>\n</tbody>\n</table>\n<p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。大多是数据库默认的隔离级别为Read-Committed，比如SqlServer、Oracle。少数数据库默认隔离级别为：Repeatable-Read，比如MySQL InnoDB。</p>\n<p><a href=\"https://lixaviers.github.io/suyan-ms/#/mysql\" target=\"_blank\" rel=\"noopener\">数据库事务移步MySQL第七条</a></p>\n<p>二、</p>\n    </div>\n</template>\n\n<script>\nimport Util from '@/libs/util';\nexport default {\n    methods: {\n        print() {\n            Util.print();\n        }\n    }\n}\n</script>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./spring.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./spring.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./spring.vue?vue&type=template&id=e8b93168&\"\nimport script from \"./spring.vue?vue&type=script&lang=js&\"\nexport * from \"./spring.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}