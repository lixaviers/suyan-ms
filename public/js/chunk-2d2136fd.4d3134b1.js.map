{"version":3,"sources":["webpack:///./src/views/page/distributed.vue?3485","webpack:///src/views/page/distributed.vue","webpack:///./src/views/page/distributed.vue?0ead","webpack:///./src/views/page/distributed.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","on","print","_m","staticRenderFns","component"],"mappings":"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","file":"public/js/chunk-2d2136fd.4d3134b1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"suyan__home\"},[_c('h1',[_vm._v(\"分布式\"),_c('el-button',{staticClass:\"suyan__btn__print\",attrs:{\"type\":\"primary\",\"plain\":\"\"},on:{\"click\":_vm.print}},[_vm._v(\"打印pdf\")])],1),_c('el-divider'),_c('h3',[_vm._v(\"一、RPC实现及原理\")]),_c('h4',[_vm._v(\"1.1 RPC概述\")]),_c('p',[_vm._v(\"RPC(Remote Procedure Call)即远程过程调用，允许一台计算机调用另一台计算机上的程序得到结果，而代码中不需要做额外的编程，就像在本地调用一样。现在互联网应用的量级越来越大，单台计算机的能力有限，需要借助可扩展的计算机来完成，分布式的应用可以借助RPC来完成机器之间的调用。\")]),_c('h4',[_vm._v(\"1.2 RPC框架原理\")]),_c('p',[_vm._v(\"在RPC框架中主要有三个角色：Provider、Consumer和Registry。\")]),_c('h4',[_vm._v(\"1.3 RPC调用流程\")]),_c('p',[_vm._v(\"一次完整的RPC调用流程如下：\")]),_vm._m(0),_c('p',[_vm._v(\"RPC框架的目标就是要将2-8步骤封装起来，让用户对这些细节透明。\")]),_c('h4',[_vm._v(\"1.4 服务注册 & 发现\")]),_c('p',[_vm._v(\"服务提供者启动后主动向注册中心注册机器ip、port以及提供的服务列表。服务消费者启动时向注册中心获取服务提供方地址列表，可实现软负载均衡和Failover。\")]),_c('h4',[_vm._v(\"1.5 使用到的技术\")]),_vm._m(1),_vm._m(2),_c('h3',[_vm._v(\"二、CAP原理和BASE思想\")]),_vm._m(3),_c('p',[_vm._v(\"定理：任何分布式系统只可同时满足两点，没法三者兼顾。\")]),_c('p',[_vm._v(\"关系数据库的ACID模型拥有高一致性+可用性：\")]),_vm._m(4),_c('p',[_vm._v(\"跨数据库两段提交事务：2PC(two-phase commit)，2PC是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用，使用BASE来回避。\")]),_c('p',[_vm._v(\"BASE模式反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性：\")]),_vm._m(5),_c('p',[_vm._v(\"BASE思想的主要实现有：\")]),_vm._m(6),_c('p',[_vm._v(\"BASE思想主要强调基本的可用性，如何你需要高可用性，也就是纯粹的高性能，那么就要以一致性或容忍性为牺牲，BASE思想的方案在性能上还是有潜力可挖的。\")]),_c('p',[_vm._v(\"现在NOSQL运动丰富拓展了BASE思想，可按照具体情况定制特别方案，比如忽视一致性，获得高可用性等，NOSQL应该有下面两个流派：\")]),_vm._m(7),_c('p',[_vm._v(\"这两者共同点：都是关系数据库SQL以外的可选方案，逻辑随着数据分布，任何模型都可以自己持久化，将数据处理和数据存储分离，将读写分离，存储可以是异步或同步，取决于对一致性的要求程度。\")]),_c('p',[_vm._v(\"不同点：NOSQL之类的Key-Value存储产品是和关系数据库头碰头的产品BOX，可是适合非Java如PHP、Ruby等领域，是一种可以拿来就用的产品，而领域模型+分布式缓存+存储是一种复杂的架构解决方案，不是产品，但这种方式更灵活，更应该是架构师必须掌握的。\")]),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p'),_c('p')],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',[_c('li',[_vm._v(\"服务消费方(client)调用以本地调用方法调用服务。\")]),_c('li',[_vm._v(\"client stub接受到调用后负责将方法、参数等组装成能够进行网络传输的消息体。\")]),_c('li',[_vm._v(\"client stub找到服务地址，并将消息发送到服务端。\")]),_c('li',[_vm._v(\"server stub收到消息后进行解码。\")]),_c('li',[_vm._v(\"server stub根据解码结果调用本地的服务。\")]),_c('li',[_vm._v(\"本地服务执行并将结果返回给server stub。\")]),_c('li',[_vm._v(\"server stub将返回结果打包成消息并发送到消费方。\")]),_c('li',[_vm._v(\"client stub接收到消息，并进行解码。\")]),_c('li',[_vm._v(\"服务消费方得到最终结果。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',[_c('li',[_vm._v(\"动态代理：生成client stub和server stub需要用到Java动态代理技术，可以使用JDK原生的动态代理机制，可以使用一些开源字节码工具，如：CgLib、Javassist等。\")]),_c('li',[_vm._v(\"序列化：为了能在网络上传输和接收Java对象，我们需要对它进行序列化和反序列化操作。序列化：将Java对象转成byte[]的过程，也就是编码的过程；反序列化：将byte[]转换成Java对象的过程。可以使用Java原生的序列化机制，但是效率非常低，推荐使用开源的：protobuf、Thrift、hessian、Kryo、Msgpack。\")]),_c('li',[_vm._v(\"NIO：当前很多RPC框架都直接基于netty这一IO通讯框架，如阿里的HSF、Dubbo、Hadoop Avro，推荐使用Netty作为底层通信框架。\")]),_c('li',[_vm._v(\"服务注册中心：Redis、Zookeeper、Consul、Etcd、Nacos。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_c('a',{attrs:{\"href\":\"https://blog.csdn.net/top_code/article/details/54615853\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"参考文章\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"Consistency(一致性)：数据一致更新，所有数据变动都是同步的。\")]),_c('li',[_vm._v(\"Availability(可用性)：好的响应性能。\")]),_c('li',[_vm._v(\"Partition tolerance(分区容忍性)可靠性。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。\")]),_c('li',[_vm._v(\"Consistency一致性：在事务开始或结束时，数据库应该在一致状态。\")]),_c('li',[_vm._v(\"Isolation隔离性：事务将假定只有它自己在操作数据库，彼此不知晓。\")]),_c('li',[_vm._v(\"Durability持久性：一旦事务完成，就不能返回。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"Basically Available基本可用，支持分区失败(sharding碎片划分数据库)。\")]),_c('li',[_vm._v(\"Soft state软状态，状态可以有一段时间不同步，异步。\")]),_c('li',[_vm._v(\"Eventually consistent最终一致，最终数据是一致的就可以了，而不是实时高一致。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',[_c('li',[_vm._v(\"按功能划分数据库。\")]),_c('li',[_vm._v(\"sharding碎片。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',[_c('li',[_vm._v(\"Key-Value存储，如Amaze Dynamo等，可根据CAP三原则灵活选择不同倾向的数据库产品。\")]),_c('li',[_vm._v(\"领域模型+分布式缓存+存储，可根据CAP三原则结合自己项目定制灵活的分布式方案，难度高。\")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"suyan__home\">\n        <h1>分布式<el-button class=\"suyan__btn__print\" type=\"primary\" plain @click=\"print\">打印pdf</el-button></h1><el-divider></el-divider>\n        <h3>一、RPC实现及原理</h3>\n<h4>1.1 RPC概述</h4>\n<p>RPC(Remote Procedure Call)即远程过程调用，允许一台计算机调用另一台计算机上的程序得到结果，而代码中不需要做额外的编程，就像在本地调用一样。现在互联网应用的量级越来越大，单台计算机的能力有限，需要借助可扩展的计算机来完成，分布式的应用可以借助RPC来完成机器之间的调用。</p>\n<h4>1.2 RPC框架原理</h4>\n<p>在RPC框架中主要有三个角色：Provider、Consumer和Registry。</p>\n<h4>1.3 RPC调用流程</h4>\n<p>一次完整的RPC调用流程如下：</p>\n<ol>\n<li>服务消费方(client)调用以本地调用方法调用服务。</li>\n<li>client stub接受到调用后负责将方法、参数等组装成能够进行网络传输的消息体。</li>\n<li>client stub找到服务地址，并将消息发送到服务端。</li>\n<li>server stub收到消息后进行解码。</li>\n<li>server stub根据解码结果调用本地的服务。</li>\n<li>本地服务执行并将结果返回给server stub。</li>\n<li>server stub将返回结果打包成消息并发送到消费方。</li>\n<li>client stub接收到消息，并进行解码。</li>\n<li>服务消费方得到最终结果。</li>\n</ol>\n<p>RPC框架的目标就是要将2-8步骤封装起来，让用户对这些细节透明。</p>\n<h4>1.4 服务注册 &amp; 发现</h4>\n<p>服务提供者启动后主动向注册中心注册机器ip、port以及提供的服务列表。服务消费者启动时向注册中心获取服务提供方地址列表，可实现软负载均衡和Failover。</p>\n<h4>1.5 使用到的技术</h4>\n<ol>\n<li>动态代理：生成client stub和server stub需要用到Java动态代理技术，可以使用JDK原生的动态代理机制，可以使用一些开源字节码工具，如：CgLib、Javassist等。</li>\n<li>序列化：为了能在网络上传输和接收Java对象，我们需要对它进行序列化和反序列化操作。序列化：将Java对象转成byte[]的过程，也就是编码的过程；反序列化：将byte[]转换成Java对象的过程。可以使用Java原生的序列化机制，但是效率非常低，推荐使用开源的：protobuf、Thrift、hessian、Kryo、Msgpack。</li>\n<li>NIO：当前很多RPC框架都直接基于netty这一IO通讯框架，如阿里的HSF、Dubbo、Hadoop Avro，推荐使用Netty作为底层通信框架。</li>\n<li>服务注册中心：Redis、Zookeeper、Consul、Etcd、Nacos。</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/top_code/article/details/54615853\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<h3>二、CAP原理和BASE思想</h3>\n<ul>\n<li>Consistency(一致性)：数据一致更新，所有数据变动都是同步的。</li>\n<li>Availability(可用性)：好的响应性能。</li>\n<li>Partition tolerance(分区容忍性)可靠性。</li>\n</ul>\n<p>定理：任何分布式系统只可同时满足两点，没法三者兼顾。</p>\n<p>关系数据库的ACID模型拥有高一致性+可用性：</p>\n<ul>\n<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>\n<li>Consistency一致性：在事务开始或结束时，数据库应该在一致状态。</li>\n<li>Isolation隔离性：事务将假定只有它自己在操作数据库，彼此不知晓。</li>\n<li>Durability持久性：一旦事务完成，就不能返回。</li>\n</ul>\n<p>跨数据库两段提交事务：2PC(two-phase commit)，2PC是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用，使用BASE来回避。</p>\n<p>BASE模式反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性：</p>\n<ul>\n<li>Basically Available基本可用，支持分区失败(sharding碎片划分数据库)。</li>\n<li>Soft state软状态，状态可以有一段时间不同步，异步。</li>\n<li>Eventually consistent最终一致，最终数据是一致的就可以了，而不是实时高一致。</li>\n</ul>\n<p>BASE思想的主要实现有：</p>\n<ol>\n<li>按功能划分数据库。</li>\n<li>sharding碎片。</li>\n</ol>\n<p>BASE思想主要强调基本的可用性，如何你需要高可用性，也就是纯粹的高性能，那么就要以一致性或容忍性为牺牲，BASE思想的方案在性能上还是有潜力可挖的。</p>\n<p>现在NOSQL运动丰富拓展了BASE思想，可按照具体情况定制特别方案，比如忽视一致性，获得高可用性等，NOSQL应该有下面两个流派：</p>\n<ol>\n<li>Key-Value存储，如Amaze Dynamo等，可根据CAP三原则灵活选择不同倾向的数据库产品。</li>\n<li>领域模型+分布式缓存+存储，可根据CAP三原则结合自己项目定制灵活的分布式方案，难度高。</li>\n</ol>\n<p>这两者共同点：都是关系数据库SQL以外的可选方案，逻辑随着数据分布，任何模型都可以自己持久化，将数据处理和数据存储分离，将读写分离，存储可以是异步或同步，取决于对一致性的要求程度。</p>\n<p>不同点：NOSQL之类的Key-Value存储产品是和关系数据库头碰头的产品BOX，可是适合非Java如PHP、Ruby等领域，是一种可以拿来就用的产品，而领域模型+分布式缓存+存储是一种复杂的架构解决方案，不是产品，但这种方式更灵活，更应该是架构师必须掌握的。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n    </div>\n</template>\n\n<script>\nimport Util from '@/libs/util';\nexport default {\n    methods: {\n        print() {\n            Util.print();\n        }\n    }\n}\n</script>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./distributed.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./distributed.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./distributed.vue?vue&type=template&id=465d65d2&\"\nimport script from \"./distributed.vue?vue&type=script&lang=js&\"\nexport * from \"./distributed.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}