{"version":3,"sources":["webpack:///./src/views/page/mysql.vue?72d9","webpack:///src/views/page/mysql.vue","webpack:///./src/views/page/mysql.vue?8553","webpack:///./src/views/page/mysql.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","attrs","on","print","_m","staticRenderFns","component"],"mappings":"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","file":"public/js/chunk-2d0cf4c2.81f915c7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"suyan__home\"},[_c('h1',[_vm._v(\"MySQL\"),_c('el-button',{staticClass:\"suyan__btn__print\",attrs:{\"type\":\"primary\",\"plain\":\"\"},on:{\"click\":_vm.print}},[_vm._v(\"打印pdf\")])],1),_c('el-divider'),_c('h3',[_vm._v(\"一、常见的查询算法\")]),_c('p',[_vm._v(\"1、顺序查找(Linear search)：最基本的查询算法当然是顺序查找，也就是对比每个元素的方法，不过这种算法在数据量很大时效率是极低的。\")]),_c('p',[_vm._v(\"2、二分查找(binary search)：比顺序查找更快的查询方法应该就是二分查找了，二分查找的原理是查找过程从数据的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数据大于或小于中间元素的那一半中查找，而且跟开始一样从中间开始比较。如果在某一步骤数据为空，则代表找不到。\")]),_c('p',[_vm._v(\"3、二叉排序树查找：特点是：\")]),_vm._m(0),_c('p',[_vm._v(\"搜索的原理：\")]),_vm._m(1),_c('p',[_vm._v(\"4、哈希散列法(哈希表)：首先根据key值和哈希函数创建一个哈希表(散列表)，然后根据键值，通过散列函数，定位数据元素位置。\")]),_c('p',[_vm._v(\"5、分块查找(索引顺序查找)：它是顺序查找的一种改进方法。其算法思想是将n个数据元素”按块有序“划分为m块(m ≤ n)。每一个块中的节点不必有序，但块与块之间必须”按块有序“；即第1块中任意元素的关键字都必须小于第二块中任意元素的关键字；而第2块中任意元素又都必须小于第3块中的任意元素，以此类推。算法流程：\")]),_vm._m(2),_c('p',[_vm._v(\"6、B Tree(B-Tree)：它是一种平衡多路查找树。\")]),_vm._m(3),_c('p',[_vm._v(\"由于B-Tree的特性，在B-Tree中按key检索的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找返回成功，后者返回查找失败。关于B-Tree有一系列有趣的性质，列如一个度为d的B-Tree，设其索引N个key，则其高度h的上限为logd((n+1)/2)，检索一个key，其查找节点个数的渐进复杂度为0(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对数进行一个分裂、合并、转移等操作以保持B-Tree性质。\")]),_c('p',[_vm._v(\"7、B+Tree：MySQL普遍使用B+Tree实现其索引结构。与B-Tree相比，B+Tree有以下不同点：\")]),_vm._m(4),_c('p',[_vm._v(\"由于并不是所有节点都具有相同的域，因此B+Tree中叶节点和内节点一般大小不同。这点与B-Tree不同，虽然B-Tree中不同节点存放的key和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现B-Tree往往对每个节点申请同等大小的空间。一般来说，B+Tree比B-Tree更适合实现存储索引结构。\")]),_c('p',[_vm._v(\"8、带有顺序访问指针的B+Tree：一般在数据库系统或文件系统使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提高了区间查询效率。\")]),_c('p'),_c('p'),_c('p'),_c('p'),_c('p')],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"若它的左子树不空，则左子树上所有结点的值均小于它的根节点的值；\")]),_c('li',[_vm._v(\"若它的右子树不空，则右子树上所有结点的值均大于它的根节点的值；\")]),_c('li',[_vm._v(\"它的左、右子树也分别为二叉排序树(递归实现)；\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"查找操作从根节点开始，一个一个节点递归查找。\")]),_c('li',[_vm._v(\"若该节点的值与要找的值吻合，那么找到退出。\")]),_c('li',[_vm._v(\"若要找的值大于该节点的值，查找它的右子树节点。\")]),_c('li',[_vm._v(\"若要找的值小于该节点的值，查找它的左子树节点。\")]),_c('li',[_vm._v(\"若该节点是NULL，那么说明已经查找完了整个树，还没有找到。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"先选取各块中的最大关键字构成一个索引表。\")]),_c('li',[_vm._v(\"查找分为两个部分：先对索引表进行二分查找或者顺序查找，以确定待查记录在哪一块中。然后在已确定的块中用顺序法进行查找。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"有一个根节点，根节点只有一个记录或者两个孩子或者根节点为空。\")]),_c('li',[_vm._v(\"每个节点记录中的key和指针相互间隔，指针指向孩子节点。\")]),_c('li',[_vm._v(\"d表示数的宽度，除叶子节点之外，其它每个节点有[d/2, d-1]条记录，并且这些记录中的key都是从左到右按大小排列的，有[d/2+1, d]个孩子。\")]),_c('li',[_vm._v(\"在一个节点中，第n个子树中的所有key，小于这个节点中第n个key，大于第n-1个key。\")]),_c('li',[_vm._v(\"所有的叶子节点必须在同一层次，也就是它们具有相同的深度。\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_vm._v(\"每个节点的指针上线为2d，不是2d+1。\")]),_c('li',[_vm._v(\"内节点不存储data，只存储key。\")]),_c('li',[_vm._v(\"叶子节点不存储指针。\")])])}]\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"suyan__home\">\n        <h1>MySQL<el-button class=\"suyan__btn__print\" type=\"primary\" plain @click=\"print\">打印pdf</el-button></h1><el-divider></el-divider>\n        <h3>一、常见的查询算法</h3>\n<p>1、顺序查找(Linear search)：最基本的查询算法当然是顺序查找，也就是对比每个元素的方法，不过这种算法在数据量很大时效率是极低的。</p>\n<p>2、二分查找(binary search)：比顺序查找更快的查询方法应该就是二分查找了，二分查找的原理是查找过程从数据的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数据大于或小于中间元素的那一半中查找，而且跟开始一样从中间开始比较。如果在某一步骤数据为空，则代表找不到。</p>\n<p>3、二叉排序树查找：特点是：</p>\n<ul>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根节点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根节点的值；</li>\n<li>它的左、右子树也分别为二叉排序树(递归实现)；</li>\n</ul>\n<p>搜索的原理：</p>\n<ul>\n<li>查找操作从根节点开始，一个一个节点递归查找。</li>\n<li>若该节点的值与要找的值吻合，那么找到退出。</li>\n<li>若要找的值大于该节点的值，查找它的右子树节点。</li>\n<li>若要找的值小于该节点的值，查找它的左子树节点。</li>\n<li>若该节点是NULL，那么说明已经查找完了整个树，还没有找到。</li>\n</ul>\n<p>4、哈希散列法(哈希表)：首先根据key值和哈希函数创建一个哈希表(散列表)，然后根据键值，通过散列函数，定位数据元素位置。</p>\n<p>5、分块查找(索引顺序查找)：它是顺序查找的一种改进方法。其算法思想是将n个数据元素&rdquo;按块有序&ldquo;划分为m块(m &le; n)。每一个块中的节点不必有序，但块与块之间必须&rdquo;按块有序&ldquo;；即第1块中任意元素的关键字都必须小于第二块中任意元素的关键字；而第2块中任意元素又都必须小于第3块中的任意元素，以此类推。算法流程：</p>\n<ul>\n<li>先选取各块中的最大关键字构成一个索引表。</li>\n<li>查找分为两个部分：先对索引表进行二分查找或者顺序查找，以确定待查记录在哪一块中。然后在已确定的块中用顺序法进行查找。</li>\n</ul>\n<p>6、B Tree(B-Tree)：它是一种平衡多路查找树。</p>\n<ul>\n<li>有一个根节点，根节点只有一个记录或者两个孩子或者根节点为空。</li>\n<li>每个节点记录中的key和指针相互间隔，指针指向孩子节点。</li>\n<li>d表示数的宽度，除叶子节点之外，其它每个节点有[d/2, d-1]条记录，并且这些记录中的key都是从左到右按大小排列的，有[d/2+1, d]个孩子。</li>\n<li>在一个节点中，第n个子树中的所有key，小于这个节点中第n个key，大于第n-1个key。</li>\n<li>所有的叶子节点必须在同一层次，也就是它们具有相同的深度。</li>\n</ul>\n<p>由于B-Tree的特性，在B-Tree中按key检索的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找返回成功，后者返回查找失败。关于B-Tree有一系列有趣的性质，列如一个度为d的B-Tree，设其索引N个key，则其高度h的上限为logd((n+1)/2)，检索一个key，其查找节点个数的渐进复杂度为0(logdN)。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对数进行一个分裂、合并、转移等操作以保持B-Tree性质。</p>\n<p>7、B+Tree：MySQL普遍使用B+Tree实现其索引结构。与B-Tree相比，B+Tree有以下不同点：</p>\n<ul>\n<li>每个节点的指针上线为2d，不是2d+1。</li>\n<li>内节点不存储data，只存储key。</li>\n<li>叶子节点不存储指针。</li>\n</ul>\n<p>由于并不是所有节点都具有相同的域，因此B+Tree中叶节点和内节点一般大小不同。这点与B-Tree不同，虽然B-Tree中不同节点存放的key和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现B-Tree往往对每个节点申请同等大小的空间。一般来说，B+Tree比B-Tree更适合实现存储索引结构。</p>\n<p>8、带有顺序访问指针的B+Tree：一般在数据库系统或文件系统使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提高了区间查询效率。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n    </div>\n</template>\n\n<script>\nimport Util from '@/libs/util';\nexport default {\n    methods: {\n        print() {\n            Util.print();\n        }\n    }\n}\n</script>","import mod from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./mysql.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../../node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!../../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!./mysql.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mysql.vue?vue&type=template&id=1c9791ab&\"\nimport script from \"./mysql.vue?vue&type=script&lang=js&\"\nexport * from \"./mysql.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/_vue-loader@15.9.6@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}